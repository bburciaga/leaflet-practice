{"version":3,"sources":["Components/TrailerParkTitle.tsx","Components/HomePopup.tsx","Components/HomeVectorLayers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TrailerParkTitle","useState","crnrs","la","lo","textboxBounds","SVGOverlay","attributes","stroke","bounds","x","y","width","height","fill","r","cx","cy","HomePopup","latitude","longitude","setPosition","map","useMapEvents","click","locate","locationfound","e","latlng","lat","lng","flyTo","getZoom","Marker","position","Popup","HomeVectorLayers","stores","gasStations","tpS","rd","tpP","purpleOptions","color","LayersControl","Overlay","checked","name","LayerGroup","Polyline","pathOptions","positions","Rectangle","fillColor","FeatureGroup","Circle","center","radius","App","className","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27914bee.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { SVGOverlay } from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nfunction TrailerParkTitle() {\r\n\r\n    const [textboxBounds] = useState({crnrs: [\r\n        {la:53.91952,lo:-122.63984},\r\n        {la:53.91823,lo:-122.63731}\r\n    ]})\r\n\r\n    return (\r\n        <SVGOverlay attributes={{ stroke: 'red' }} \r\n            bounds={[\r\n                [textboxBounds.crnrs[0].la,textboxBounds.crnrs[0].lo],\r\n                [textboxBounds.crnrs[1].la,textboxBounds.crnrs[1].lo]\r\n            ]}>\r\n            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"blue\" />\r\n            <circle r=\"5\" cx=\"10\" cy=\"10\" fill=\"red\" />\r\n            <text x=\"0%\" y=\"50%\" stroke=\"white\">\r\n                Crown Parks Home\r\n            </text>\r\n        </SVGOverlay>\r\n    )\r\n}\r\n\r\nexport default TrailerParkTitle\r\n","import React from 'react'\r\nimport { Marker, Popup, useMapEvents } from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nfunction HomePopup() {\r\n    const [position, setPosition] = useState({latitude: 0, longitude: 0})\r\n    const map = useMapEvents({\r\n        click() {\r\n            map.locate()\r\n        },\r\n        locationfound(e) {\r\n            const { lat, lng } = e.latlng\r\n            setPosition({\r\n                latitude: lat,\r\n                longitude: lng,\r\n            })\r\n            map.flyTo(e.latlng, map.getZoom())\r\n        },\r\n    })\r\n\r\n//53 -122\r\n    /*\r\n    return (\r\n        position.latitude !== 0 ?\r\n        <Marker\r\n            position={[position.latitude, position.longitude]}>\r\n            <Popup>\r\n                You are here\r\n            </Popup>\r\n        </Marker>\r\n        \r\n        :null\r\n    )\r\n    */\r\n    return (\r\n        \r\n        <Marker\r\n            position={[53.91818, -122.64218]}>\r\n            <Popup>\r\n                You are here\r\n            </Popup>\r\n        </Marker>\r\n    )\r\n}\r\n\r\nexport default HomePopup\r\n","import React from 'react'\r\n\r\nimport {    Circle, \r\n            Polyline,\r\n            Rectangle, \r\n            Popup, \r\n            LayerGroup, \r\n            FeatureGroup, \r\n            LayersControl,\r\n            Marker } from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nimport TrailerParkTitle from './TrailerParkTitle'\r\nimport HomePopup from './HomePopup'\r\n\r\nfunction HomeVectorLayers() {\r\n\r\n    const [trailerParkCenter] = useState({latitude: 53.9177, longitude:-122.64179})\r\n    const [gasStations] = useState({ stores: [\r\n        {la:53.92128,lo:-122.6483},\r\n        {la:53.90608,lo:-122.67687}\r\n    ]})\r\n    //la = latitude; lo = longitude\r\n    //tpS stands for trailer park square\r\n    //crnrs = corners\r\n    const [tpS] = useState({ crnrs: [\r\n        {la:53.91995,lo:-122.6411},\r\n        {la:53.91681,lo:-122.64278}\r\n    ]})\r\n    //tpP stands for trailer park polyline\r\n    //rd = road\r\n    const [tpP] = useState({rd: [\r\n        {la:53.9195,lo:-122.64212},\r\n        {la:53.91752,lo:-122.64213},\r\n        {la:53.91751,lo:-122.64138},\r\n        {la:53.91893,lo:-122.64135} \r\n    ]})\r\n\r\n    const fillBlueOption = { fillColor: 'blue' }\r\n    const fillBlackOption = { fillColor: 'black' }\r\n    const limeOptions = { color: 'lime' }\r\n    const purpleOptions = { color: 'purple' }\r\n\r\n    return (\r\n        <div>\r\n            <LayersControl position=\"topright\">\r\n\r\n                <LayersControl.Overlay checked name=\"Layer of Trailer Park\">\r\n                    <LayerGroup>\r\n                        <Polyline \r\n                            pathOptions={limeOptions}\r\n                            positions={[\r\n                                [tpP.rd[0].la, tpP.rd[0].lo],\r\n                                [tpP.rd[1].la, tpP.rd[1].lo],\r\n                                [tpP.rd[2].la, tpP.rd[2].lo],\r\n                                [tpP.rd[3].la, tpP.rd[3].lo]\r\n                            ]} />\r\n                        <Rectangle\r\n                            pathOptions={fillBlackOption}\r\n                            bounds={[\r\n                                [tpS.crnrs[0].la,tpS.crnrs[0].lo],\r\n                                [tpS.crnrs[1].la,tpS.crnrs[1].lo]\r\n                            ]} />\r\n                        <TrailerParkTitle />\r\n                        <HomePopup />\r\n                    </LayerGroup>\r\n                </LayersControl.Overlay>\r\n\r\n                <LayersControl.Overlay checked name=\"Layer of Gas Stations\">\r\n                    <FeatureGroup>\r\n                        <Circle\r\n                        center={[gasStations.stores[0].la, gasStations.stores[0].lo]}\r\n                        pathOptions={purpleOptions} radius={100}>\r\n                            <Popup>\r\n                                Airport Husky\r\n                            </Popup>\r\n                        </Circle>\r\n                        <Circle\r\n                        center={[gasStations.stores[1].la, gasStations.stores[1].lo]}\r\n                        pathOptions={purpleOptions} radius={100}>\r\n                            <Popup>\r\n                                Petro Canada\r\n                            </Popup>\r\n                        </Circle>\r\n                    </FeatureGroup>\r\n                </LayersControl.Overlay>\r\n\r\n            </LayersControl>\r\n\r\n            \r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeVectorLayers\r\n","import React from 'react';\nimport './App.css';\n\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport HomePopup from './Components/HomePopup';\nimport HomeVectorLayers from './Components/HomeVectorLayers';\nimport TrailerParkTitle from './Components/TrailerParkTitle';\n\nfunction App() {\n  return (\n    <div className=\"App mapid\">\n      <MapContainer center={[53.91836, -122.64722]} zoom={13} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\n          <HomeVectorLayers />\n      </MapContainer>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}