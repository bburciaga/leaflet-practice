{"version":3,"sources":["Components/TrailerParkTitle.tsx","Components/PrinceGeorgePopups.tsx","Components/HomeVectorLayers.tsx","Components/AnimatedPanning.tsx","Components/LatLngDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TrailerParkTitle","useState","crnrs","la","lo","textboxBounds","SVGOverlay","attributes","stroke","bounds","x","y","width","height","fill","r","cx","cy","GasStationPopups","stores","gasStations","Marker","position","Popup","HomePopup","HomeVectorLayers","tpS","outertpS","setBounds","map","useMap","innerHandlers","useMemo","click","fitBounds","locations","rd","tpP","purpleOptions","color","LayersControl","Overlay","checked","name","LayerGroup","Polyline","pathOptions","positions","Rectangle","fillColor","eventHandlers","FeatureGroup","Circle","center","radius","SetViewOnClick","animateRef","useMapEvent","e","setView","latlng","getZoom","animate","current","AnimatedPanning","useRef","type","onChange","DisplayPosition","getCenter","setPosition","onClick","useCallback","onMove","useEffect","on","off","lat","toFixed","lng","LatLngDisplay","setMap","displayMap","MapContainer","zoom","scrollWheelZoom","whenCreated","TileLayer","attribution","url","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61aef5a6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { SVGOverlay } from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nfunction TrailerParkTitle() {\r\n\r\n    const [textboxBounds] = useState({crnrs: [\r\n        {la:53.91952,lo:-122.63984},\r\n        {la:53.91823,lo:-122.63731}\r\n    ]})\r\n\r\n    return (\r\n        <SVGOverlay attributes={{ stroke: 'red' }} \r\n            bounds={[\r\n                [textboxBounds.crnrs[0].la,textboxBounds.crnrs[0].lo],\r\n                [textboxBounds.crnrs[1].la,textboxBounds.crnrs[1].lo]\r\n            ]}>\r\n            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"blue\" />\r\n            <circle r=\"5\" cx=\"10\" cy=\"10\" fill=\"red\" />\r\n            <text x=\"0%\" y=\"50%\" stroke=\"white\">\r\n                Crown Parks Home\r\n            </text>\r\n        </SVGOverlay>\r\n    )\r\n}\r\n\r\nexport default TrailerParkTitle\r\n","import React from 'react'\r\nimport { Marker, Popup, useMapEvents } from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nfunction GasStationPopups() {\r\n    const [gasStations] = useState({ stores: [\r\n        {la:53.92128,lo:-122.6483},     //Airport Husky\r\n        {la:53.90608,lo:-122.67687}     //Petro Canada\r\n    ]})\r\n\r\n    return (\r\n        <div>\r\n            <Marker\r\n                position={[gasStations.stores[0].la,gasStations.stores[0].lo]}>\r\n                <Popup>\r\n                    Airport Husky\r\n                </Popup>\r\n            </Marker>\r\n            <Marker\r\n                position={[gasStations.stores[1].la,gasStations.stores[1].lo]}>\r\n                <Popup>\r\n                    Petro Canada\r\n                </Popup>\r\n            </Marker>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nfunction HomePopup() {\r\n    /*\r\n    const [position, setPosition] = useState({latitude: 0, longitude: 0})\r\n    const map = useMapEvents({\r\n        click() {\r\n            map.locate()\r\n        },\r\n        locationfound(e) {\r\n            const { lat, lng } = e.latlng\r\n            setPosition({\r\n                latitude: lat,\r\n                longitude: lng,\r\n            })\r\n            map.flyTo(e.latlng, map.getZoom())\r\n        },\r\n        \r\n    })\r\n\r\n    return (\r\n        position.latitude !== 0 ?\r\n        <Marker\r\n            position={[position.latitude, position.longitude]}>\r\n            <Popup>\r\n                You are here\r\n            </Popup>\r\n        </Marker>\r\n        \r\n        :null\r\n    )\r\n    \r\n    */\r\n   return (\r\n       null\r\n   )\r\n}\r\n\r\nexport {\r\n    HomePopup,\r\n    GasStationPopups\r\n}\r\n","import React from 'react'\r\n\r\nimport {    Circle, \r\n            Polyline,\r\n            Rectangle, \r\n            Popup, \r\n            LayerGroup, \r\n            FeatureGroup, \r\n            LayersControl, \r\n            useMap} from 'react-leaflet'\r\nimport { useState } from 'react'\r\n\r\nimport TrailerParkTitle from './TrailerParkTitle'\r\nimport { HomePopup, GasStationPopups } from './PrinceGeorgePopups'\r\nimport { useMemo } from 'react'\r\n\r\nfunction HomeVectorLayers() {\r\n\r\n    //la = latitude; lo = longitude\r\n    //tpS stands for trailer park square\r\n    //crnrs = corners\r\n    const [tpS] = useState({ crnrs: [\r\n        {la:53.91995,lo:-122.6411},\r\n        {la:53.91681,lo:-122.64278}\r\n    ]})\r\n    const [outertpS] = useState({ crnrs: [\r\n        {la:53.91999,lo:-122.64219},\r\n        {la:53.91667,lo:-122.64385}\r\n    ]})\r\n\r\n    const [bounds, setBounds] = useState(outertpS)\r\n    const map = useMap()\r\n\r\n    const innerHandlers = useMemo(\r\n        () => ({\r\n            click() {\r\n                setBounds(outertpS)\r\n                map.fitBounds([\r\n                    [outertpS.crnrs[0].la,outertpS.crnrs[0].lo],\r\n                    [outertpS.crnrs[1].la,outertpS.crnrs[1].lo]\r\n                ])\r\n            },\r\n        }),\r\n        [map],\r\n    )\r\n\r\n    const [locations] = useState({ stores: [\r\n        {la:53.89658,lo:-122.64176},\r\n        {la:53.90691,lo:-122.72378}\r\n    ]})\r\n    \r\n    //tpP stands for trailer park polyline\r\n    //rd = road\r\n    const [tpP] = useState({rd: [\r\n        {la:53.9195,lo:-122.64212},\r\n        {la:53.91752,lo:-122.64213},\r\n        {la:53.91751,lo:-122.64138},\r\n        {la:53.91893,lo:-122.64135} \r\n    ]})\r\n\r\n    const fillBlueOption = { fillColor: 'blue' }\r\n    const fillBlackOption = { fillColor: 'black' }\r\n    const limeOptions = { color: 'lime' }\r\n    const purpleOptions = { color: 'purple' }\r\n\r\n    return (\r\n        <div>\r\n            <LayersControl position=\"topright\">\r\n\r\n                <LayersControl.Overlay checked name=\"Layer of Trailer Park\">\r\n                    <LayerGroup>\r\n                        <Polyline \r\n                            pathOptions={limeOptions}\r\n                            positions={[\r\n                                [tpP.rd[0].la, tpP.rd[0].lo],\r\n                                [tpP.rd[1].la, tpP.rd[1].lo],\r\n                                [tpP.rd[2].la, tpP.rd[2].lo],\r\n                                [tpP.rd[3].la, tpP.rd[3].lo]\r\n                            ]} />\r\n                        <Rectangle\r\n                            pathOptions={fillBlackOption}\r\n                            eventHandlers={innerHandlers}\r\n                            bounds={[\r\n                                [tpS.crnrs[0].la,tpS.crnrs[0].lo],\r\n                                [tpS.crnrs[1].la,tpS.crnrs[1].lo]\r\n                            ]} />\r\n                        <TrailerParkTitle />\r\n                    </LayerGroup>\r\n                </LayersControl.Overlay>\r\n\r\n                <LayersControl.Overlay checked name=\"Layer of Locations\">\r\n                    <FeatureGroup>\r\n                        <Circle\r\n                        center={[locations.stores[0].la, locations.stores[0].lo]}\r\n                        pathOptions={purpleOptions} radius={100}>\r\n                            <Popup>\r\n                                Blackburn Skatepark\r\n                            </Popup>\r\n                        </Circle>\r\n                        <Circle\r\n                        center={[locations.stores[1].la, locations.stores[1].lo]}\r\n                        pathOptions={purpleOptions} radius={100}>\r\n                            <Popup>\r\n                                LG Gunn Park\r\n                            </Popup>\r\n                        </Circle>\r\n                    </FeatureGroup>\r\n                </LayersControl.Overlay>\r\n                \r\n                <LayersControl.Overlay checked name=\"Layer of Gas Station Popups\">\r\n                    <GasStationPopups />\r\n                </LayersControl.Overlay>\r\n                <LayersControl.Overlay checked name=\"Layer of Current Position\">\r\n                    <HomePopup />\r\n                </LayersControl.Overlay>\r\n            </LayersControl>\r\n\r\n            \r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeVectorLayers\r\n","import React, { useRef } from 'react'\r\nimport { useMapEvent } from 'react-leaflet'\r\n\r\nfunction SetViewOnClick({ animateRef }) {\r\n    const map = useMapEvent('click', (e) => {\r\n        map.setView(e.latlng, map.getZoom(), {\r\n            animate: animateRef.current || false,\r\n        })\r\n    })\r\n\r\n    return null\r\n}\r\n\r\nfunction AnimatedPanning() {\r\n\r\n    const animateRef = useRef(false)\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        onChange= {() => {\r\n                            animateRef.current = !animateRef.current\r\n                        }}\r\n                    />\r\n                    Animate panning\r\n                </label>\r\n            </p>\r\n            <SetViewOnClick animateRef={animateRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnimatedPanning\r\n","import React, { useState, useCallback, useEffect, useMemo } from 'react'\r\nimport { MapContainer, TileLayer } from 'react-leaflet'\r\n\r\nimport HomeVectorLayers from './HomeVectorLayers';\r\nimport AnimatedPanning from './AnimatedPanning';\r\n\r\nconst center = [53.91836, -122.64722]\r\nconst zoom = 13\r\n\r\nfunction DisplayPosition({ map }) {\r\n  const [position, setPosition] = useState(map.getCenter())\r\n\r\n  const onClick = useCallback(() => {\r\n    map.setView(center, zoom)\r\n  }, [map])\r\n\r\n  const onMove = useCallback(() => {\r\n    setPosition(map.getCenter())\r\n  }, [map])\r\n\r\n  useEffect(() => {\r\n    map.on('move', onMove)\r\n    return () => {\r\n      map.off('move', onMove)\r\n    }\r\n  }, [map, onMove])\r\n\r\n  return (\r\n    <p>\r\n      latitude: {position.lat.toFixed(4)}, longitude: {position.lng.toFixed(4)}{' '}\r\n      <button onClick={onClick}>reset</button>\r\n    </p>\r\n  )\r\n}\r\n\r\nfunction LatLngDisplay() {\r\n    \r\n    const [map, setMap] = useState<any>(null)\r\n    \r\n    const displayMap = useMemo(\r\n        () => (\r\n          <MapContainer\r\n            center={[53.91836, -122.64722]}\r\n            zoom={zoom}\r\n            scrollWheelZoom={false}\r\n            whenCreated={setMap}>\r\n            <TileLayer\r\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <AnimatedPanning />\r\n            <HomeVectorLayers />\r\n          </MapContainer>\r\n        ),\r\n        [],\r\n      )\r\n\r\n    return (\r\n        <div>\r\n            {map ? <DisplayPosition map={map} /> : null}\r\n            {displayMap}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LatLngDisplay\r\n","import React from 'react';\nimport './App.css';\n\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport HomeVectorLayers from './Components/HomeVectorLayers';\nimport AnimatedPanning from './Components/AnimatedPanning';\nimport LatLngDisplay from './Components/LatLngDisplay';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App mapid\">\n      <LatLngDisplay />\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}